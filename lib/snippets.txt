{
	"Header": {
		"scope": "cpp",
		"prefix": "cheader",
		"body": [
			"#include <bits/stdc++.h>",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <chrono>",
			"#define pb push_back",
			"#define INF 0x3f3f3f3f",
			"#define LINF 0x3f3f3f3f3f3f3f3f",
			"#define endl '\\n'",
			"#define ll long long",
			"#define f first",
			"#define fin cin",
			"#define fout cout",
			"#define s second",
			"#define int long long",
			"#define FAST cin.tie(0), cout.tie(0), ios::sync_with_stdio(0)",
			"#define debug(x) cerr << \"DEBUG \" << x << endl",
			"#define debug2(x, y) cerr << \"DEBUG \" << x << \" \" << y << endl",
			"#define debug3(x, y, z) cerr << \"DEBUG \" << x << \" \" << y << \" \" << z << endl",
			"#define debug4(x, y, z, o) cerr << \"DEBUG \" << x << \" \" << y << \" \" << z << \" \" << o << endl",
			"#define all(x) x.begin(), x.end()",
			"#define left esquerda",
			"#define lb lower_bound",
			"#define right direita",
			"using namespace std;",
			"void setIO(string s) {",
			"    ios_base::sync_with_stdio(0); cin.tie(0);",
			"    freopen((s+\".in\").c_str(),\"r\",stdin);",
			"    freopen((s+\".out\").c_str(),\"w\",stdout);",
			"}",
			"typedef pair<ll, ll> pii;",
			"typedef vector<vector<char>> mat;",
			"typedef pair<int, string> pis;",
			"const ll mod = 1e9 + 7, MAXN = 2e5 + 5;",
			"typedef vector<int> vi;",
			"typedef pair<int, pair<int, int>> piii;",
			"$0"
		],
		"description": "insertHeader"
	},
	"Codeforces Template": {
		"scope": "cpp",
		"prefix": "codeforces",
		"body": [
			"void solve() {",
			"    $1",
			"}",
			"",
			"int32_t main() {",
			"    int ct = 1;",
			"    cin >> ct;",
			"    while(ct--)",
			"        solve();",
			"    return 0;",
			"}"
		],
		"description": "Insert Codeforces template with solve() and main() functions."
	},
	"Read Vector of Integers": {
		"scope": "cpp",
		"prefix": "readvi",
		"body": [
			"int n;",
			"cin >> n;",
			"vector<int> v(n);",
			"for(int i = 0; i < n; i++)",
			"    cin >> v[i];",
			"$0"
		],
		"description": "Read a vector of integers of size n."
	},	
	"Disjoint Set Union": {
		"prefix": "dsu",
		"body": [
			"int pai[MAXN], sz[MAXN];",
			"",
			"void startDsu(int n) {",
			"    for(int i = 0; i <= n; i++) {",
			"        pai[i] = i;",
			"        sz[i] = 1;",
			"    }",
			"}",
			"",
			"int find(int u) {",
			"    if(pai[u] != u)",
			"        return pai[u] = find(pai[u]);",
			"    return u;",
			"}",
			"",
			"void join(int a, int b) {",
			"    a = find(a), b = find(b);",
			"    if(a == b) return;",
			"",
			"    if(sz[a] > sz[b])",
			"        swap(a, b);",
			"",
			"    pai[a] = b;",
			"    if(sz[a] == sz[b])",
			"        sz[b]++;",
			"}"
		],
		"description": "Disjoint Set Union (DSU) with path compression and union by size"
	},
	"Modular Exponentiation": {
        "prefix": "modExpo",
        "body": [
            "ll modExpo(ll a, ll p) {",
            "    if(p == 0)",
            "        return 1;",
            "    if(p == 1)",
            "        return a;",
            "",
            "    ll mult = modExpo(a, p/2);",
            "    if(p & 1)",
            "        return (((mult * mult) % mod) * a) % mod;",
            "",
            "    return (mult * mult) % mod;",
            "}"
        ],
        "description": "Recursive Modular Exponentiation"
    },
	"Fenwick Tree (BIT)": {
		"prefix": "fenwick",
		"body": [
			"int BIT[MAXN];",
			"int N;",
			"",
			"void update(int x, int val) {",
			"    while(x <= N) {",
			"        BIT[x] += val;",
			"        x += (x & -x);",
			"    }",
			"}",
			"",
			"int query(int x) {",
			"    int res = 0;",
			"    while(x > 0) {",
			"        res += BIT[x];",
			"        x -= (x & -x);",
			"    }",
			"    return res;",
			"}"
		],
		"description": "Fenwick Tree (Binary Indexed Tree) for range sum queries and updates"
	},	
	"Segment Tree with Lazy Propagation": {
		"prefix": "seglazy",
		"body": [
			"ll seg[4*MAXN], lazy[4*MAXN];",
			"",
			"void unlazy(int u, int l, int r) {",
			"    seg[u] += (r - l + 1) * lazy[u];",
			"    if(l != r) {",
			"        lazy[2*u] += lazy[u];",
			"        lazy[2*u+1] += lazy[u];",
			"    }",
			"    lazy[u] = 0;",
			"}",
			"",
			"void update(int u, int l, int r, int lq, int rq, int x) {",
			"    if(l > rq || r < lq)",
			"        return;",
			"    if(l >= lq && r <= rq) {",
			"        lazy[u] += x;",
			"        unlazy(u, l, r);",
			"        return;",
			"    }",
			"    int mid = (l + r) / 2;",
			"    update(2*u, l, mid, lq, rq, x);",
			"    update(2*u+1, mid+1, r, lq, rq, x);",
			"    seg[u] = seg[2*u] + seg[2*u+1];",
			"    unlazy(u, l, r);",
			"}",
			"",
			"ll query(int u, int l, int r, int k) {",
			"    unlazy(u, l, r);",
			"    if(l > k || r < k)",
			"        return 0;",
			"    if(l == r && l == k)",
			"        return seg[u];",
			"    int mid = (l + r) / 2;",
			"    return query(2*u, l, mid, k) + query(2*u+1, mid+1, r, k);",
			"}"
		],
		"description": "Segment Tree with Lazy Propagation for range updates and queries"
	},
	"Breadth-First Search (BFS)": {
		"prefix": "bfs",
		"body": [
			"void bfs(int start, int n) {",
			"    vector<int> dist(n + 5, -1);",
			"    queue<int> q({start});",
			"    dist[start] = 0;",
			"",
			"    while(!q.empty()) {",
			"        int u = q.front();",
			"        q.pop();",
			"",
			"        for(int &nxt : g[u])",
			"            if(dist[nxt] == -1) {",
			"                dist[nxt] = dist[u] + 1;",
			"                q.push(nxt);",
			"            }",
			"    }",
			"}"
		],
		"description": "Breadth-First Search (BFS) for shortest paths in an unweighted graph"
	},
	"binomials": {
	"prefix": "binomials",
	"body": [
		"ll modExpo(ll a, ll p) {",
		"    if(p == 0)",
		"        return 1;",
		"    if(p == 1)",
		"        return a;",
		"",
		"    ll mult = modExpo(a, p/2);",
		"    if(p & 1)",
		"        return (((mult * mult) % mod) * a) % mod;",
		"",
		"    return (mult * mult) % mod;",
		"}",
		"",
		"void startComb() {",
		"    fat[0] = fat[1] = inv[0] = inv[1] = 1;",
		"    for(int i = 2; i < MAXN; i++) {",
		"        fat[i] = (fat[i - 1] * i) % mod;",
		"        inv[i] = fat[i];",
		"    }",
		"}",
		"",
		"ll c(int n, int k) {",
		"    int aux = (1ll * fat[n] * inv[n - k]) % mod;",
		"    aux = (aux * inv[k]) % mod;",
		"    return aux;",
		"}"
	],
	"description": "Snippet for binomial coefficient setup with modExpo, startComb, and c(n, k)"
	}	
	
	
}